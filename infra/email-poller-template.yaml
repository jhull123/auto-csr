AWSTemplateFormatVersion: '2010-09-09'
Description: Deploys the Email Poller Python Lambda v2

Parameters:
  CodeBucket:
    Type: String
    Description: S3 bucket where Lambda code is stored

  CodeKey:
    Type: String
    Description: Path to Lambda zip in S3

  InboundEmailBucket:
    Type: String
    Description: S3 bucket for inbound emails

  PollInterval:
    Type: Number
    Default: 10
    Description: Polling interval in minutes

Conditions:
  IsOneMinute: !Equals [!Ref PollInterval, 1]

Resources:
  EmailPollerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: email-poller-v2
      Runtime: python3.10
      Handler: main.main
      Role: !GetAtt EmailPollerLambdaRole.Arn
      Timeout: 30
      MemorySize: 128
      Code:
        S3Bucket: !Ref CodeBucket
        S3Key: !Ref CodeKey
      Environment:
        Variables:
          INBOUND_EMAIL_BUCKET: !Ref InboundEmailBucket

  EmailPollerEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: email-poller-schedule-v2
      Description: Triggers the Email Poller Lambda periodically
      ScheduleExpression:
        Fn::Join:
          - ""
          - - "rate("
            - !Ref PollInterval
            - " "
            - !If [IsOneMinute, "minute", "minutes"]
            - ")"
      State: ENABLED
      Targets:
        - Arn: !GetAtt EmailPollerFunction.Arn
          Id: EmailPollerTarget

  EmailPollerLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref EmailPollerFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EmailPollerEventRule.Arn

  EmailPollerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: email-poller-lambda-role-v2
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaLogging
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:StartQuery
                  - logs:GetQueryResults
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                Resource: "*"
        - PolicyName: GmailSecretsAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                  - secretsmanager:UpdateSecret
                Resource: 
                  - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:GmailOAuthToken*"
                  - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:GmailOAuthCredentials*"
        - PolicyName: GmailToS3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Sub "arn:aws:s3:::${InboundEmailBucket}"
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:HeadObject
                  - s3:GetObject
                Resource: !Sub "arn:aws:s3:::${InboundEmailBucket}/emails/*"
